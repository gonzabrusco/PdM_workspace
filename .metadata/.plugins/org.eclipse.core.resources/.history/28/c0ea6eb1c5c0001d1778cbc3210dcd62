/*
 * API_uart.c
 *
 *  Created on: Mar 12, 2023
 *      Author: gonza
 */

#include "API_uart.h"
#include "stm32f4xx_hal_uart.h"

static UART_HandleTypeDef uartHandle;

uint32_t BaudRate;                  /*!< This member configures the UART communication baud rate.
                                         The baud rate is computed using the following formula:
                                         - IntegerDivider = ((PCLKx) / (8 * (OVR8+1) * (huart->Init.BaudRate)))
                                         - FractionalDivider = ((IntegerDivider - ((uint32_t) IntegerDivider)) * 8 * (OVR8+1)) + 0.5
                                         Where OVR8 is the "oversampling by 8 mode" configuration bit in the CR1 register. */

uint32_t WordLength;                /*!< Specifies the number of data bits transmitted or received in a frame.
                                         This parameter can be a value of @ref UART_Word_Length */

uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
                                         This parameter can be a value of @ref UART_Stop_Bits */

uint32_t Parity;                    /*!< Specifies the parity mode.
                                         This parameter can be a value of @ref UART_Parity
                                         @note When parity is enabled, the computed parity is inserted
                                               at the MSB position of the transmitted data (9th bit when
                                               the word length is set to 9 data bits; 8th bit when the
                                               word length is set to 8 data bits). */

uint32_t Mode;                      /*!< Specifies whether the Receive or Transmit mode is enabled or disabled.
                                         This parameter can be a value of @ref UART_Mode */

uint32_t HwFlowCtl;                 /*!< Specifies whether the hardware flow control mode is enabled or disabled.
                                         This parameter can be a value of @ref UART_Hardware_Flow_Control */

uint32_t OverSampling;


bool_t uartInit() {
	uartHandle.BaudRate = 9600;
	uartHandle.WordLength = UART_WORDLENGTH_8B;
	uartHandle.StopBits = UART_STOPBITS_1;
	uartHandle.Parity = UART_PARITY_ODD;
	uartHandle.Mode = UART_MODE_TX_RX;
	uartHandle.HwFlowCtl = UART_HWCONTROL_NONE;
	uartHandle.OverSampling = UART_OVERSAMPLING_16;
}

void uartSendString(uint8_t * pstring) {

}

void uartSendStringSize(uint8_t * pstring, uint16_t size) {

}

void uartReceiveStringSize(uint8_t * pstring, uint16_t size) {

}
